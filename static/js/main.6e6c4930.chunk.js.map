{"version":3,"sources":["hooks/fetch-hook.ts","services/api-service.ts","components/Dashboard/Dashboard.tsx","reportWebVitals.ts","index.tsx"],"names":["FetchHook","url","request","useState","data","setData","getData","a","fetch","then","res","text","response","d","JSON","parse","error","useEffect","APIService","_method","_headers","_body","_url","this","headers","i","hasOwnProperty","push","key","value","method","body","Object","keys","length","fetchHook","columns","color","label","getRequest","type","setHeaders","setMethod","setURL","removeEmpty","cols","newObj","forEach","item","bln","col","getDataSet","column","fill","position","values","map","obj","backgroundColor","borderColor","getOptions","title","labels","legend","responsive","display","fontSize","tooltips","mode","elements","line","scales","yAxes","scaleLabel","labelString","xAxes","ticks","autoSkip","maxTicksLimit","Dashboard","combined","objs","dt","dateTime","Moment","format","sorted","sort","sortedObj","combine","execute","csv","allLines","split","lines","header","idx","convertCSV","data1","f","dataset1","datasets","options1","data2","g","dataset2","options2","data3","b","dataset3","options3","data4","dataset4","options4","id","className","options","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e6c4930.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport {useEffect, useState} from 'react';\n\nexport function FetchHook(url: string, request: any) {\n    const [data, setData] = useState<any>([]);\n    const getData = async () => {\n        const response = await fetch(url, request).then(res => res.text());\n        let d = response;\n        try {\n            d = JSON.parse(response);\n        } catch (error) {}\n        setData(d);\n    }\n    useEffect(() => {\n        getData();\n    }, []);\n    return data;\n}\n\nexport default FetchHook;","import fetchHook from '../hooks/fetch-hook';\n\nexport type KeyValue<T, U> = {\n    key: T,\n    value: U,\n};\n\nexport type APIMethod = \"POST\" | \"GET\" | \"LOCAL\";\n\nexport class APIService {\n    private _method: APIMethod = \"GET\";\n    private _headers: string[][] = [];\n    private _body: any = {};\n    private _url: string = \"\";\n\n    get headers(): string[][] {\n        return this._headers\n    }\n\n    public setHeaders(headers: KeyValue<string, string>[]): APIService {\n        for (const i in headers) {\n            if (headers[i].hasOwnProperty('key') && headers[i].hasOwnProperty('value'))\n                this._headers.push([headers[i].key, headers[i].value]);\n        }\n\n        return this;\n    }\n\n    public setMethod(method: APIMethod): APIService {\n        this._method = method;\n\n        return this;\n    }\n\n    public setBody (body: any): APIService {\n        this._body = body;\n\n        return this;\n    }\n\n    public setURL(url: string): APIService {\n        this._url = url;\n\n        return this;\n    }\n\n    public execute() {\n        let request: any = {\n            headers: this._headers,\n            method: this._method,\n            body: (this._body && Object.keys(this._body).length > 0 ? this._body : null)\n        };\n        return fetchHook(this._url, request);\n        //console.log(data);\n        /*const [data, setData] = useState({metservice: [], isFetching: false});\n        useEffect(() => {\n            const fetchData = async () => {\n                try {\n                    setData({metservice: data.metservice, isFetching: true});\n                    const response = await fetch(this._url, request).then(res => res.json());\n                    setData({metservice: response, isFetching: false});\n                } catch(error) {\n                    setData({metservice: data.metservice, isFetching: false});\n                }\n            };\n            fetchData();\n        });\n        return data.metservice;*/\n        /*return new Promise<any>((resolve, reject) => {\n            fetch(\n                this._url, \n                request\n            )\n            .then(res => res.json())\n            .then(data => {\n                return resolve(data);\n            })\n            .catch(() => {\n                return reject({\n                    error: \"Fetch request error\"\n                });\n            });\n        });*/\n    }\n\n    //public request<T> (body: T): RequestInit {\n    //    return {\n    //        headers: this._headers,\n    //        method: this._method,\n    //        body: JSON.stringify(body),\n    //    }\n    //}\n}\n\nexport default APIService;","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport Moment from 'moment';\nimport './Dashboard.scss';\nimport { APIService } from '../../services/api-service';\n\nconst columns: any = {\n    \"a\": {\n        key: \"sea_surface_wave_significant_height\",\n        color: \"75,192,192\",\n        label: \"Significant\"\n    },\n    \"b\": {\n        key: \"air_temperature_at_2m_above_ground_level\",\n        color: \"75,192,192\",\n        label: \"Air Temperature at 2m Above Ground Level\"\n    },\n    \"c\": {\n        key: \"wind_from_direction_at_10m_above_ground_level\",\n        color: \"75,192,192\",\n        label: \"Wind from direction at 10m above ground level\"\n    },\n    \"d\": {\n        key: \"wind_speed_at_10m_above_ground_level\",\n        color: \"75,192,192\",\n        label: \"wind speed at 10m above ground level\"\n    },\n    \"e\": {\n        key: \"sea_surface_wave_from_direction_at_variance_spectral_density_maximum\",\n        color: \"43, 82, 222\",\n        label: \"variance spectral density maximum\"\n    },\n    \"f\": {\n        key: \"sea_surface_wave_maximum_height\",\n        color: \"43, 82, 222\",\n        label: \"Maximum\"\n    },\n    \"g\": {\n        key: \"surface_sea_water_speed\",\n        color: \"75,192,192\",\n        label: \"surface sea water speed\"\n    },\n};\n\nconst getRequest = (type: string) => {\n    return new APIService()\n    .setHeaders([\n        {\n            key: 'Accept',\n            value: 'application/' + type\n          }, {\n            key: 'Content-Type',\n            value: 'application/' + type\n          }\n    ])\n    .setMethod('GET')\n    .setURL('data.' + type);\n}\n\nconst convertCSV = (csv: any) => {\n    if (typeof csv != 'string')\n        return [];\n    let allLines: any = csv.split(/\\r|\\n|\\r/);\n    let headers: any = allLines[0].split(',');\n    let lines: any = {};\n    for(let i = 1; i < allLines.length; i++) {\n        if (allLines[i]) {\n            let data = allLines[i].split(',');\n            headers.forEach((header: any, idx: number) => {\n                if (idx === 0)\n                    lines[data[0]] = {};\n                else\n                    lines[data[0]][header] = data[idx] === \"null\" ? null : data[idx];\n            });\n        }\n    }\n    return lines;\n}\n\nconst combine = (objs: any) => {\n    let newObj: any = {};\n    objs.forEach((obj: any) => {\n        Object.keys(obj).forEach((dt: any) => {\n            if (!(dt in newObj))\n                newObj[dt] = {dateTime: Moment(dt).format(\"DD/MM/YYYY HH:mm:ss\")};\n            Object.keys(columns).forEach((col: any) => {\n                if (!(columns[col].key in newObj[dt]))\n                    newObj[dt][columns[col].key] = null;\n                if (columns[col].key in obj[dt])\n                    newObj[dt][columns[col].key] = obj[dt][columns[col].key];\n            });\n        });\n    });\n    let sorted: any = Object.keys(newObj).sort();\n    let sortedObj: any = {};\n    sorted.forEach((item: string) => {\n        let d: string = Moment(item).format(\"DD/MM/YYYY HH:mm:ss\");\n        sortedObj[d] = newObj[item];\n    });\n\n    return sortedObj;\n}\n\nconst removeEmpty = (cols: any, data: any) => {\n    let newObj: any = {};\n    Object.keys(data).forEach((item: any) => {\n        let bln: boolean = false;\n        cols.forEach((col: any) => {\n            if (data[item][col.key] !== null)\n                bln = true;\n        });\n        if (bln)\n            newObj[item] = data[item];\n    });\n\n    return newObj;\n}\n\nconst getDataSet = (column: any, data: any, fill: any) => {\n    return {\n        position: 'right',\n        label: column.label,\n        data: Object.values(data).map((obj: any) => { return obj[column.key]; }),\n        fill: fill,\n        backgroundColor: 'rgb(' + column.color + ')',\n        borderColor: 'rgba(' + column.color + ', 0.7)'\n    }\n}\n\n\nconst getOptions = (title: string, labels: any, legend: boolean) => {\n    let ret = {\n        responsive: true,\n        title: {\n            display: true,\n            position: 'top',\n            fontSize: 22,\n            text: title\n        },\n        legend: {\n            display: legend\n        },\n        tooltips: {\n            mode: 'label'\n        },\n        elements: {\n            line: {\n                fill: false\n            }\n        },\n        scales: {\n            yAxes: labels.map((obj: any) => { \n                return {\n                    scaleLabel: {\n                        display: true,\n                        labelString: obj\n                    }\n                }; \n            }),\n            xAxes: [{\n                ticks: {\n                    autoSkip: true,\n                    maxTicksLimit: 20\n                }\n            }]\n        }\n    }\n    return ret;\n}\n\nconst Dashboard: React.FC = () => {\n    let jsonData = getRequest('json').execute();\n    let csvData = getRequest('csv').execute();\n    let csv = convertCSV(csvData);\n    let combined = combine([jsonData, csv]);\n    let data1 = removeEmpty([columns.a, columns.f], combined);\n    var dataset1 = {\n        labels: Object.keys(data1),\n        datasets: [\n            getDataSet(columns.f, data1, 1),\n            getDataSet(columns.a, data1, 'origin')\n        ]\n    };\n    let options1 = getOptions('Sea Surface Wave Height', ['Meters'], true);\n    \n    let data2 = removeEmpty([columns.g], combined);\n    var dataset2 = {\n        labels: Object.keys(data2),\n        datasets: [\n            getDataSet(columns.g, data2, false)\n        ]\n    };\n    let options2 = getOptions('Sea Surface Water Speed', ['KM/H'], false);\n\n    let data3 = removeEmpty([columns.b], combined);\n    var dataset3 = {\n        labels: Object.keys(data3),\n        datasets: [\n            getDataSet(columns.b, data3, false)\n        ]\n    };\n    let options3 = getOptions('Air Temperature 2m Above Ground', [], false);\n\n    let data4 = removeEmpty([columns.d], combined);\n    var dataset4 = {\n        labels: Object.keys(data4),\n        datasets: [\n            getDataSet(columns.d, data4, false)\n        ]\n    };\n    let options4 = getOptions('Wind Speed 10m Above Ground', ['KM/H'], false);\n\n    return (\n        <div id=\"dashboard\">\n            <div className=\"line\">\n                <Line data={dataset1} options={options1} />\n            </div>\n            <div className=\"line\">\n                <Line data={dataset2} options={options2} />\n            </div>\n            <div className=\"line\">\n                <Line data={dataset3} options={options3} />\n            </div>\n            <div className=\"line\">\n                <Line data={dataset4} options={options4} />\n            </div>\n        </div>\n    );\n}\n\nexport default Dashboard;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Dashboard />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}